import json
import time
import asyncio
from typing import AsyncGenerator
from fastapi.responses import StreamingResponse
from ...core.entities.execution import Execution


class AgentStreamingService:
    async def stream_agent_response(self, query: str, agent_id: str) -> StreamingResponse:
        async def event_generator() -> AsyncGenerator[str, None]:
            try:
                yield "data: {\"type\": \"connection\", \"status\": \"connected\"}\n\n"
                
                # Simulate agent execution with multiple steps
                steps = [
                    f"Processing query: {query}",
                    "Analyzing request...",
                    "Searching for relevant information...",
                    "Found 3 relevant sources",
                    "Synthesizing response...",
                    "Finalizing output..."
                ]
                
                for i, step in enumerate(steps):
                    yield f"data: {json.dumps({
                        'type': 'message',
                        'content': step,
                        'timestamp': time.time(),
                        'step': i+1
                    })}\n\n"
                    await asyncio.sleep(0.5)  # Simulate processing time
                
                # Final result
                result = f"Answer to '{query}': This is a simulated response from the agent. In a real implementation, this would be generated by LangGraph."
                yield f"data: {json.dumps({
                    'type': 'result',
                    'content': result,
                    'timestamp': time.time()
                })}\n\n"
                
                yield "data: {\"type\": \"complete\"}\n\n"
            except Exception as e:
                yield f"data: {json.dumps({'type': 'error', 'message': str(e)})}\n\n"
        
        return StreamingResponse(
            event_generator(),
            media_type="text/event-stream",
            headers={
                "Cache-Control": "no-cache",
                "Connection": "keep-alive",
                "X-Accel-Buffering": "no"
            }
        )
